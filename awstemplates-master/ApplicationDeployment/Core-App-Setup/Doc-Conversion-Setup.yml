# -------------------------------------------------------------------------------------------------
#
#     Copyright Â© Genpact 2018. All Rights Reserved.
#     Ltd trading as G in NYSE - Registered in US.
#     Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.
#
# -------------------------------------------------------------------------------------------------
## author = 'Sandeep Kumar (Genpact Limited)'
## ver = '1.0.2'
## date = 03-Oct-2018
# -------------------------------------------------------------------------------------------------
# modified_by = 'Sandeep Kumar (Genpact Limited)'
# ver = '1.0.3'
# date = 20-Jun-2019
# Changes = "Doc conversion server moved from Linux to windows server as few fonts 
#            were not suppored on Linux"
# -------------------------------------------------------------------------------------------------

AWSTemplateFormatVersion: 2010-09-09
Description: Creates Core-App LB, LC and ASG in VPC2 for the environment
Parameters:
    Prefix:
        Description: Prefix Name
        Default: pvai
        Type: String
    AccountName:
        Description: Account alias name
        Default: verification
        Type: String    
    Region: 
        Description: AWS Region
        Default: Primary
        Type: String
        AllowedValues: 
           - Primary
           - Secondary
        ConstraintDescription: Select the Region for creation.
    KeyName:       
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instance.
        Default: pvai-verification-sit
        Type: 'AWS::EC2::KeyPair::KeyName'      
    EnvType: 
        Description: Environment Type
        Default: sit
        Type: String
        AllowedValues: 
           - dev
           - ml
           - sit
           - val
           - prod
           - ut
           - pt
        ConstraintDescription: Select the Environment for Creation.
    AMI:
        Description: AMI for EC2 Instance
        Default: ami-09a786b6b333dc237
        Type: AWS::EC2::Image::Id        
    InstanceType:
        Description: Instance Type
        Default: m5.large
        Type: String
        AllowedValues: [ t2.medium, t2.xlarge, m4.large, m4.xlarge, m5.large, m5.xlarge ]
        ConstraintDescription: Select the Instance Type for EC2.
    InstanceProfile:
        Description: Instance Role
        Default: EC2-S3-AccessRole
        Type: String
    DesiredCapacity:
       Description: EC2 Instance Desired for App
       Type: Number
       Default: 2
       ConstraintDescription: 'Must be in the range [1-10]'
       MinValue: 1
       MaxValue: 10
    CIDR:
       Description: IP range for the security group
       Type: String
       Default: "10.0.0.0/8"
    S3Bucket:
       Description: S3 Bucket for War file
       Type: String
       Default: "pvai-app-deployment"
    PackagePath:
       Description: Path for core-app application package
       Type: String
       Default: "Release1.0/Patch-5/core-app"
    LoadBalancerDeregistrationDelay:
       Description: Wait time (in sec) for changing the state of a deregistering target
       Type: Number
       Default: 30
       ConstraintDescription: 'Must be in the range [0-600]'
       MinValue: 0
       MaxValue: 600
    HostedZoneResource:
       Description: Private DNS
       Type: String
       Default: "local."
    App:
       Description: Application Name
       Type: String
       Default: "doc"    
    AppPort:
       Description: Port being used to hit the App
       Type: String
       Default: 8080
       AllowedPattern: ^[0-9/]*$
    IdleTimeout:
       Description: The time (in seconds) that a connection to the load balancer can remain idle
       Type: Number
       Default: 1800
       ConstraintDescription: 'Must be in the range [60-3600]'
       MinValue: 60
       MaxValue: 3600    
Conditions: 
  # Create condition based on the Environment selected;
  # To fetch the VPC and Subnet values based on the condition
  GetDevNetworkValues: !And
       - !Equals [ !Ref EnvType, "dev" ]
       - !Equals [ !Ref Region, Primary ]
  GetMLNetworkValues: !And
       - !Equals [ !Ref EnvType, "ml"]
       - !Equals [ !Ref Region, Primary ]
  GetPTNetworkValues: !And
       - !Equals [ !Ref EnvType, "pt"]
       - !Equals [ !Ref Region, Primary ]
  GetUTNetworkValues: !And
       - !Equals [ !Ref EnvType, "ut"]
       - !Equals [ !Ref Region, Primary ]
  GetSITNetworkValues: !And
       - !Equals [ !Ref EnvType, "sit"]
       - !Equals [ !Ref Region, Primary ]
  GetValNetworkValues: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, Primary ]
  GetProdNetworkValues: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, Primary ]
  GetProdNetworkValuesSecondary: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, Secondary ]
  GetValNetworkValuesSecondary: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, Secondary ]
Resources:
  sg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${Prefix}-${EnvType}-${App}-vpc2  
      GroupDescription: !Sub "Security Group for Doc Conversion application for ${EnvType} environment"
      VpcId: !If [GetValNetworkValues, !ImportValue vpc20A, !If [GetProdNetworkValues, !ImportValue vpc20A, !If [GetDevNetworkValues, !ImportValue vpc21A, !If [GetMLNetworkValues, !ImportValue vpc21A, !If [GetPTNetworkValues, !ImportValue vpc24A, !If [GetUTNetworkValues, !ImportValue vpc23A, !If [GetSITNetworkValues, !ImportValue vpc22A, !If [GetProdNetworkValuesSecondary,!ImportValue vpc20B, !If [GetValNetworkValuesSecondary, !ImportValue vpc20B, ""]]]]]]]]]
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${EnvType}-${App}-vpc2

  sgingress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg
      IpProtocol: '-1'
      CidrIp: !Ref CIDR 
  
  launchconfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          # Just for testing purpose to debug if file is created or not
          files:
            /tmp/test.txt:
              content: Hello Doc-Conversion world!
              mode: '000755'
              owner: root
              group: root
          commands:
            # get ROOT.war from s3 bucket, move it to proper location and stop/start the tomcat service
            1-stoptomcat:
              command: "service tomcat stop"
              cwd: "~"
              ignoreErrors: "false"
            2-downloadandrundoc:
              command: !Sub su ec2-user -c "aws s3 cp s3://${S3Bucket}/${PackagePath}/doc-conversion.war /usr/local/tomcat/PVAI/webapps/ && sleep 5"
              cwd: "~"
              ignoreErrors: "false"
            3-starttomcat:
              command: "service tomcat start"
              cwd: "~"
              ignoreErrors: "false"
              
    # Properties for LaunchConfiguration and Instance to be created from LaunchConfiguration
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      EbsOptimized: "true"
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      InstanceMonitoring: 'true'
      AssociatePublicIpAddress: 'false'
      SecurityGroups:
        - !Ref sg
      # User Data commands to be run during Initialization of Server
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash -xe
            yum update -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource launchconfig --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource asgroup --region ${AWS::Region}
      
  # ASG code for handling Classic Load Balancer properties
  asgroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: '300'
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckGracePeriod: '300'
      HealthCheckType: EC2
      MaxSize: '10'
      MinSize: '1'
      VPCZoneIdentifier:
        # Fetch EC2Subnet1 and EC2Subnet2 values
        # Based on the condition defined as per Environment selected
        - !If [GetValNetworkValues, !ImportValue subnet23b0A, !If [GetProdNetworkValues, !ImportValue subnet24b0A, !If [GetDevNetworkValues, !ImportValue subnet23b1A, !If [GetMLNetworkValues, !ImportValue subnet24b1A, !If [GetPTNetworkValues, !ImportValue subnet23b4A, !If [GetUTNetworkValues, !ImportValue subnet23b3A, !If [GetSITNetworkValues, !ImportValue subnet23b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet24b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet23b0B, ""]]]]]]]]]
        - !If [GetValNetworkValues, !ImportValue subnet25b0A, !If [GetProdNetworkValues, !ImportValue subnet26b0A, !If [GetDevNetworkValues, !ImportValue subnet25b1A, !If [GetMLNetworkValues, !ImportValue subnet26b1A, !If [GetPTNetworkValues, !ImportValue subnet24b4A, !If [GetUTNetworkValues, !ImportValue subnet24b3A, !If [GetSITNetworkValues, !ImportValue subnet24b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet26b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet25b0B, ""]]]]]]]]]
      LaunchConfigurationName: !Ref launchconfig
      LoadBalancerNames:
        - !Ref ClassicLoadBalancer
      # Adding tags to identify the ASG resource
      # Same tags will be applicable to the instance launched
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${EnvType}-${App}
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref App
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvType
          PropagateAtLaunch: true
        - Key: Account
          Value: !Ref AccountName
          PropagateAtLaunch: true
        - Key: Scheduled
          Value: "no"
          PropagateAtLaunch: true
      TerminationPolicies:
        - Default
    DependsOn:
        - ClassicLoadBalancer        
    #Creation policy for resource creation and deployment
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: '1'
        Timeout: PT10M
    #Update policy for deploying new version
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '2'
        PauseTime: PT3M
        WaitOnResourceSignals: 'true'
        
  # Classic LoadBalancer for Application
  ClassicLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Sub ${Prefix}-${EnvType}-${App}-clb
      Scheme: internal
      SecurityGroups: 
        - !Ref sg
      # fetch ELB Subnet1 and ELB Subnet2 values
      # same subnet as for ec2 instance
      Subnets:
        - !If [GetValNetworkValues, !ImportValue subnet23b0A, !If [GetProdNetworkValues, !ImportValue subnet24b0A, !If [GetDevNetworkValues, !ImportValue subnet23b1A, !If [GetMLNetworkValues, !ImportValue subnet24b1A, !If [GetPTNetworkValues, !ImportValue subnet23b4A, !If [GetUTNetworkValues, !ImportValue subnet23b3A, !If [GetSITNetworkValues, !ImportValue subnet23b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet24b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet23b0B, ""]]]]]]]]]
        - !If [GetValNetworkValues, !ImportValue subnet25b0A, !If [GetProdNetworkValues, !ImportValue subnet26b0A, !If [GetDevNetworkValues, !ImportValue subnet25b1A, !If [GetMLNetworkValues, !ImportValue subnet26b1A, !If [GetPTNetworkValues, !ImportValue subnet24b4A, !If [GetUTNetworkValues, !ImportValue subnet24b3A, !If [GetSITNetworkValues, !ImportValue subnet24b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet26b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet25b0B, ""]]]]]]]]]
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${EnvType}-${App}
        - Key: Project
          Value: xce
        - Key: Environment
          Value: !Ref EnvType
      Listeners:
      - LoadBalancerPort: 80
        InstancePort:
          Ref: AppPort
        Protocol: HTTP
      ConnectionSettings:
        IdleTimeout: !Ref IdleTimeout
      CrossZone: true
      HealthCheck:
        Target:
          Fn::Join:
          - ''
          - - 'TCP:'
            - Ref: AppPort
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  # Creating alarm to identify any unhealthy host under WebApp using Classic LoadBalancer
  UnhealthyHostAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
         AlarmName: !Sub ${Prefix}-${EnvType}-${App}-alarm
         AlarmDescription: Unhealthy host under Doc Conversion ELB
         Namespace: AWS/ELB
         Dimensions:
          - Name: "LoadBalancerName"
            Value: !Ref ClassicLoadBalancer
         MetricName: UnHealthyHostCount
         ComparisonOperator: GreaterThanThreshold
         Statistic: Minimum
         Period: 120
         EvaluationPeriods: 2
         Threshold: 0
  # Creating DNS record for the Classic ELB and Application
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneResource
      Comment: Zone apex alias targeted to Elastic LoadBalancer.
      RecordSets:
      - Name: !Sub "${Prefix}-${EnvType}-${App}-clb.${HostedZoneResource}"
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ClassicLoadBalancer.CanonicalHostedZoneNameID
          DNSName: !GetAtt ClassicLoadBalancer.DNSName