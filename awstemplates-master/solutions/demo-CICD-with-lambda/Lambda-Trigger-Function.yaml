---

# -------------------------------------------------------------------------------------------------

#

#     Copyright ? Genpact 2018. All Rights Reserved.

#     Ltd trading as G in NYSE - Registered in US.

#     Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.

#

# -------------------------------------------------------------------------------------------------

## author = 'Sandeep Kumar (Genpact Limited)'

## ver = '1.0.0'

## date = 30-Apr-2019

# -------------------------------------------------------------------------------------------------

Transform: AWS::Serverless-2016-10-31

AWSTemplateFormatVersion: '2010-09-09'

Description: Create Lambda Function to terminate the instances with specific filter



Parameters:

  AccountName:

      Description: AWS Account Name

      Default: verification

      Type: String

  EnvType:

      Description: Environment name

      Type: String

      Default: ut

      AllowedValues: ["dev", "pt", "ml", "val", "prod", "sit", "ut"]

  Region:

      Type: String

      Default: Primary

      AllowedValues:

      - "Primary"

      - "Secondary"

      Description: Please specify the region where you want to create your Lambda function

# Pre-requisite for Lambda function to create an IAM role

# which will have access on CloudWatch logs, Describe EC2, Invoke Lambda and EC2 Key S3 Bucket services

# modify this role to invoke new function

  ExecutionRole:

      Description: Role for Lambda function

      Default: lambda_deploy_app

      Type: String

  LambdaS3Bucket:

      Description: S3 Bucket for Lambda Function

      Default: "pvai-devops-lambda-functions"

      Type: String

  MemorySize:

      Description: Memory Size for Lambda function

      Default: 128

      Type: String

  TimeOut:

      Description: TimeOut for Lambda function (in seconds)

      Default: 30

      Type: String

  LambdaPackage:

      Description: Python function as a package with all dependencies

      Default: "trigger-function.zip"

      Type: String

  TriggerLambdaFunction:

      Description: Lambda Function Name to be created by this stack

      Default: "trigger-localization-dev"

      Type: String
      
  DeploymentLambdaFunction:

      Description: Lambda Function Name to be trigged

      Default: "deploy-localization-dev"

      Type: String

  SecurityGroup:

      Description: Security Group ID associated with the Lambda function

      Default: "sg-0b4d45719564d9f8b"

      Type: String

  InstanceName:

      Description: Instance Tag Value of Name key

      Default: "pvai-local-cor"

      Type: String

Conditions:

  # Create condition based on the Environment and Region selected;

  # To fetch the VPC and Subnet values based on the condition

  GetDevNetworkValues: !And

       - !Equals [ !Ref EnvType, "dev" ]

       - !Equals [ !Ref Region, "Primary" ]

  GetMLNetworkValues: !And

       - !Equals [ !Ref EnvType, "ml"]

       - !Equals [ !Ref Region, "Primary" ]

  GetPTNetworkValues: !And

       - !Equals [ !Ref EnvType, "pt"]

       - !Equals [ !Ref Region, "Primary" ]

  GetUTNetworkValues: !And

       - !Equals [ !Ref EnvType, "ut"]

       - !Equals [ !Ref Region, "Primary" ]

  GetSITNetworkValues: !And

       - !Equals [ !Ref EnvType, "sit"]

       - !Equals [ !Ref Region, "Primary" ]

  GetValNetworkValues: !And

       - !Equals [ !Ref EnvType, "val"]

       - !Equals [ !Ref Region, "Primary" ]

  GetProdNetworkValues: !And

       - !Equals [ !Ref EnvType, "prod"]

       - !Equals [ !Ref Region, "Secondary" ]

  GetProdNetworkValuesSecondary: !And

       - !Equals [ !Ref EnvType, "prod"]

       - !Equals [ !Ref Region, "Secondary" ]

  GetValNetworkValuesSecondary: !And

       - !Equals [ !Ref EnvType, "val"]

       - !Equals [ !Ref Region, "Secondary" ]

       

Resources:

  lambdaFunction:

    Type: "AWS::Lambda::Function"

    Properties: 

        Code:

          S3Bucket: !Ref LambdaS3Bucket

          S3Key: !Ref LambdaPackage

        Description: "Get Host IP and Trigger Deployment Function"

        Environment:

          Variables:

            INSTANCE_NAME: !Ref InstanceName

            DEPLOY_FUNCTION: !Ref DeploymentLambdaFunction

        FunctionName: !Ref TriggerLambdaFunction

        Handler: !Sub "trigger-function.trigger_handler"

        MemorySize: !Ref MemorySize

        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ExecutionRole}"

        Runtime: "python2.7"

        Timeout: !Ref TimeOut

        VpcConfig:

           "SecurityGroupIds": [ !Ref SecurityGroup ]

           "SubnetIds": [ !If [GetValNetworkValues, !ImportValue subnet23b0A, !If [GetProdNetworkValues, !ImportValue subnet24b0A, !If [GetDevNetworkValues, !ImportValue subnet23b1A, !If [GetMLNetworkValues, !ImportValue subnet24b1A, !If [GetPTNetworkValues, !ImportValue subnet23b4A, !If [GetUTNetworkValues, !ImportValue subnet23b3A, !If [GetSITNetworkValues, !ImportValue subnet23b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet24b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet23b0B, ""]]]]]]]]] , !If [GetValNetworkValues, !ImportValue subnet25b0A, !If [GetProdNetworkValues, !ImportValue subnet26b0A, !If [GetDevNetworkValues, !ImportValue subnet25b1A, !If [GetMLNetworkValues, !ImportValue subnet26b1A, !If [GetPTNetworkValues, !ImportValue subnet24b4A, !If [GetUTNetworkValues, !ImportValue subnet24b3A, !If [GetSITNetworkValues, !ImportValue subnet24b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet26b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet25b0B, ""]]]]]]]]]]

        Tags:

          - Key: Environment

            Value: !Ref EnvType

          - Key: Account

            Value: !Ref AccountName

Outputs:

  lambdaArn:

    Value: !GetAtt "lambdaFunction.Arn"