#------------------------------------------------------------------------------------#
## Copyright Â© Genpact 2018. All Rights Reserved.                                   ##
## Ltd trading as G in NYSE - Registered in US.                                     ##
## Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.  ##
#------------------------------------------------------------------------------------#
## Author = 'Vivek Trivedi (Genpact Limited)'                                       ##
## Version = '1.0.0'                                                                ##
## Date = 17-Apr-2018                                                                ##
#------------------------------------------------------------------------------------#
# -----------------------------------------------------------------------------------#
## modified_by = 'Vivek Trivedi (Genpact Limited)'
## ver = '1.0.1'
## changes = "NACL related changes"
## date = 21-Jul-2018
# -----------------------------------------------------------------------------------#
AWSTemplateFormatVersion: 2010-09-09
Description: OPERATIONS VPC-1
Parameters:
    Region: 
        Description: AWS Region
        Default: N-Virginia(us-east-1)
        Type: String
        AllowedValues: 
           - N-Virginia(us-east-1)
           - Ireland(eu-west-1)
Conditions: 
  CreateCondition-A: !Equals [ !Ref Region, N-Virginia(us-east-1) ]
  CreateCondition-B: !Equals [ !Ref Region, Ireland(eu-west-1) ]
Resources:
  VPC1A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition-A
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC1A

  VPC1ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-A
    Properties:
      GroupId: !GetAtt 
        - VPC1A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8

  VPC1ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-A
    Properties:
      GroupId: !GetAtt 
        - VPC1A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8

  VPC1ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-A
    Properties:
      GroupId: !GetAtt 
        - VPC1A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '5986'
      ToPort: '5986'
      CidrIp: 10.0.0.0/8

  VPC1ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-A
    Properties:
      GroupId: !GetAtt 
        - VPC1A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '3389'
      ToPort: '3389'
      CidrIp: 10.0.0.0/8

  VPC1ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-A
    Properties:
      GroupId: !GetAtt 
        - VPC1A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8

  VPC1ADefaultSecurityGroupIngress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-A
    Properties:
      GroupId: !GetAtt 
        - VPC1A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8

  VPC1ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition-A
    Properties:
      GroupId: !GetAtt 
        - VPC1A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  
  NetworkAclVPC1A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition-A
    Properties:
      VpcId: !Ref VPC1A
      Tags:
        - Key: Name
          Value: pvai-ops-vpc1
          
  Inbound1NetworkAclEntry1A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition-A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC1A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry1A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition-A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC1A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"      
  
  VPC1B:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition-B
    Properties:
      CidrBlock: 10.1.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC1B

  VPC1BDefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-B
    Properties:
      GroupId: !GetAtt 
        - VPC1B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8

  VPC1BDefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-B
    Properties:
      GroupId: !GetAtt 
        - VPC1B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8

  VPC1BDefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-B
    Properties:
      GroupId: !GetAtt 
        - VPC1B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '5986'
      ToPort: '5986'
      CidrIp: 10.0.0.0/8

  VPC1BDefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-B
    Properties:
      GroupId: !GetAtt 
        - VPC1B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '3389'
      ToPort: '3389'
      CidrIp: 10.0.0.0/8

  VPC1BDefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-B
    Properties:
      GroupId: !GetAtt 
        - VPC1B
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8

  VPC1BDefaultSecurityGroupIngress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition-B
    Properties:
      GroupId: !GetAtt 
        - VPC1B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8

  VPC1BDefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition-B
    Properties: 
      GroupId: !GetAtt 
        - VPC1B
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

  NetworkAclVPC1B:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition-B
    Properties:
      VpcId: !Ref VPC1B
      Tags:
        - Key: Name
          Value: pvai-ops-vpc1
          
  Inbound1NetworkAclEntry1B:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition-B
    Properties:
      NetworkAclId: !Ref NetworkAclVPC1B
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry1B:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition-B
    Properties:
      NetworkAclId: !Ref NetworkAclVPC1B
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"      
Outputs:
  VPC1A:
    Description: The VPC-ID of the VPC1A - OPERATIONS VPC
    Condition: CreateCondition-A
    Value: !Ref VPC1A
    Export:
      Name: vpc1A
  VPC1B:
    Description: The VPC-ID of the VPC1B - OPERATIONS VPC
    Condition: CreateCondition-B
    Value: !Ref VPC1B
    Export:
      Name: vpc1B
  vpcsg1A:
    Description: The Default Security Group of VPC1A
    Condition: CreateCondition-A 
    Value: !GetAtt VPC1A.DefaultSecurityGroup
    Export:
      Name: vpcsg1A
  vpcsg1B:
    Description: The Default Security Group of VPC1B
    Condition: CreateCondition-B
    Value: !GetAtt VPC1B.DefaultSecurityGroup
    Export:
      Name: vpcsg1B
  NetworkAclVPC1A:
    Description: NACL for VPC1A
    Condition: CreateCondition-A
    Value: !Ref NetworkAclVPC1A
    Export:
      Name: NetworkAclVPC1A
  NetworkAclVPC1B:
    Description: NACL for VPC1B
    Condition: CreateCondition-B
    Value: !Ref NetworkAclVPC1B
    Export:
        Name: NetworkAclVPC1B