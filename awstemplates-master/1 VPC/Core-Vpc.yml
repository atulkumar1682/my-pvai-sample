#------------------------------------------------------------------------------------#
## Copyright Â© Genpact 2018. All Rights Reserved.                                   ##
## Ltd trading as G in NYSE - Registered in US.                                     ##
## Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.  ##
#------------------------------------------------------------------------------------#
## Author = 'Vivek Trivedi (Genpact Limited)'                                       ##
## Version = '1.0.0'                                                                ##
## Date = 17-Apr-2018                                                                ##
#------------------------------------------------------------------------------------#
# -----------------------------------------------------------------------------------#
## modified_by = 'Vivek Trivedi (Genpact Limited)'
## ver = '1.0.1'
## changes = "NACL related changes"
## date = 30-Jul-2018
# -----------------------------------------------------------------------------------#
AWSTemplateFormatVersion: 2010-09-09
Description: CoreVPC (Includes VPC2 [ UI - CoreAPP ] and VPC3 [ XCE and RDS ])
Parameters:
    Region: 
        Description: AWS Region
        Default: N-Virginia(us-east-1)
        Type: String
        AllowedValues: 
           - N-Virginia(us-east-1)
           - Ireland(eu-west-1)
        ConstraintDescription: Select the Region for creation.
    EnvType: 
        Description: Environment Type
        Default: DEV/ML
        Type: String
        AllowedValues: 
           - DEV/ML
           - SIT
           - VAL/PROD
           - UserTraining
           - PerformanceTesting
        ConstraintDescription: Select the Environment for Creation.
Conditions: 
  CreateCondition1A: !And
        - !Equals [ !Ref EnvType, DEV/ML ]
        - !Equals [ !Ref Region, N-Virginia(us-east-1) ]
  CreateCondition2A: !And
        - !Equals [ !Ref EnvType, SIT ]
        - !Equals [ !Ref Region, N-Virginia(us-east-1) ]
  CreateCondition0A: !And
        - !Equals [ !Ref EnvType, VAL/PROD ]
        - !Equals [ !Ref Region, N-Virginia(us-east-1) ]
  CreateCondition0B: !And
        - !Equals [ !Ref Region, Ireland(eu-west-1) ]
        - !Equals [ !Ref EnvType, VAL/PROD ]
  CreateCondition3A: !And
        - !Equals [ !Ref EnvType, UserTraining ]
        - !Equals [ !Ref Region, N-Virginia(us-east-1) ]
  CreateCondition4A: !And
        - !Equals [ !Ref EnvType, PerformanceTesting ]
        - !Equals [ !Ref Region, N-Virginia(us-east-1) ]
Resources:
  VPC21A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition1A
    Properties:
      CidrBlock: 10.10.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC2-1A
  VPC21ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC21A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC21ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC21A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8  
  VPC21ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC21A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC21ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC21A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC21ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC21A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8       
  VPC21ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC21A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC22A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition2A
    Properties:
      CidrBlock: 10.50.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC2-2A
  VPC22ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC22A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC22ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC22A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8 
  VPC22ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC22A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC22ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC22A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC22ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC22A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8       
  VPC22ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC22A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC20A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition0A
    Properties:
      CidrBlock: 10.20.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC2-0A
  VPC20ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC20A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC20ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC20A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC20ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC20A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC20ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC20A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC20ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC20A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8
  VPC20ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC20A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC20B:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition0B
    Properties:
      CidrBlock: 10.21.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC2-0B          
  VPC20BDefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC20B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/16
  VPC20BDefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC20B
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8    
  VPC20BDefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC20B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC20BDefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC20B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC20BDefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC20B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC20BDefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC20B
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0        
  VPC23A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition3A
    Properties:
      CidrBlock: 10.30.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC2-3A
  VPC23ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC23A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC23ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC23A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC23ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC23A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC23ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC23A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC23ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC23A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC23ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC23A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0          
  VPC24A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition4A
    Properties:
      CidrBlock: 10.60.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC2-4A
  VPC24ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC24A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC24ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC24A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC24ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC24A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC24ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC24A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC24ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC24A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC24ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC24A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC31A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition1A
    Properties:
      CidrBlock: 10.12.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC3-1A
  VPC31ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC31A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC31ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC31A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC31ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC31A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC31ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC31A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC31ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC31A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8       
  VPC31ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition1A
    Properties:
      GroupId: !GetAtt 
        - VPC31A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC32A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition2A
    Properties:
      CidrBlock: 10.52.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC3-2A
  VPC32ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC32A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC32ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC32A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC32ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC32A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC32ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC32A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC32ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC32A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC32ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition2A
    Properties:
      GroupId: !GetAtt 
        - VPC32A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC30A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition0A
    Properties:
      CidrBlock: 10.22.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC3-0A
  VPC30ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC30A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC30ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC30A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC30ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC30A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC30ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC30A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC30ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC30A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC30ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition0A
    Properties:
      GroupId: !GetAtt 
        - VPC30A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC30B:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition0B
    Properties:
      CidrBlock: 10.23.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC3-0B          
  VPC30BDefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC30B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC30BDefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC30B
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC30BDefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC30B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC30BDefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC30B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC30BDefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC30B
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC30BDefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition0B
    Properties:
      GroupId: !GetAtt 
        - VPC30B
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC33A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition3A
    Properties:
      CidrBlock: 10.32.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC3-3A
  VPC33ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC33A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC33ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC33A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC33ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC33A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC33ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC33A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC33ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC33A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC33ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition3A
    Properties:
      GroupId: !GetAtt 
        - VPC33A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  VPC34A:
    Type: 'AWS::EC2::VPC'
    Condition: CreateCondition4A
    Properties:
      CidrBlock: 10.62.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: VPC3-4A
  VPC34ADefaultSecurityGroupIngress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC34A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 10.0.0.0/8
  VPC34ADefaultSecurityGroupIngress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC34A
        - DefaultSecurityGroup
      IpProtocol: icmp
      FromPort: '-1'
      ToPort: '-1'
      CidrIp: 10.0.0.0/8
  VPC34ADefaultSecurityGroupIngress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC34A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 10.0.0.0/8  
  VPC34ADefaultSecurityGroupIngress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC34A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 10.0.0.0/8 
  VPC34ADefaultSecurityGroupIngress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC34A
        - DefaultSecurityGroup
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 10.0.0.0/8 
  VPC34ADefaultSecurityGroupEgress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Condition: CreateCondition4A
    Properties:
      GroupId: !GetAtt 
        - VPC34A
        - DefaultSecurityGroup
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0
  NetworkAclVPC21A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition1A
    Properties:
      VpcId: !Ref VPC21A
      Tags:
        - Key: Name
          Value: pvai-dev-ml-vpc2     
  Inbound1NetworkAclEntry21A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition1A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC21A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry21A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition1A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC21A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC22A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition2A
    Properties:
      VpcId: !Ref VPC22A
      Tags:
        - Key: Name
          Value: pvai-sit-vpc2
  Inbound1NetworkAclEntry22A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition2A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC22A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry22A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition2A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC22A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC20A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition0A
    Properties:
      VpcId: !Ref VPC20A
      Tags:
        - Key: Name
          Value: pvai-val-prod-vpc2
  Inbound1NetworkAclEntry20A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC20A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry20A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC20A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC20B:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition0B
    Properties:
      VpcId: !Ref VPC20B
      Tags:
        - Key: Name
          Value: pvai-val-prod-vpc2
  Inbound1NetworkAclEntry20B:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0B
    Properties:
      NetworkAclId: !Ref NetworkAclVPC20B
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry20B:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0B
    Properties:
      NetworkAclId: !Ref NetworkAclVPC20B
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC23A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition3A
    Properties:
      VpcId: !Ref VPC23A
      Tags:
        - Key: Name
          Value: pvai-ut-vpc2
  Inbound1NetworkAclEntry23A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition3A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC23A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry23A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition3A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC23A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC24A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition4A
    Properties:
      VpcId: !Ref VPC24A
      Tags:
        - Key: Name
          Value: pvai-pt-vpc2
  Inbound1NetworkAclEntry24A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition4A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC24A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry24A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition4A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC24A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC31A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition1A
    Properties:
      VpcId: !Ref VPC31A
      Tags:
        - Key: Name
          Value: pvai-dev-ml-vpc3
  Inbound1NetworkAclEntry31A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition1A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC31A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry31A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition1A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC31A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC32A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition2A
    Properties:
      VpcId: !Ref VPC32A
      Tags:
        - Key: Name
          Value: pvai-sit-vpc3
  Inbound1NetworkAclEntry32A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition2A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC32A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry32A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition2A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC32A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC30A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition0A
    Properties:
      VpcId: !Ref VPC30A
      Tags:
        - Key: Name
          Value: pvai-val-prod-vpc3
  Inbound1NetworkAclEntry30A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC30A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry30A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC30A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC30B:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition0B
    Properties:
      VpcId: !Ref VPC30B
      Tags:
        - Key: Name
          Value: pvai-val-prod-vpc3
  Inbound1NetworkAclEntry30B:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0B
    Properties:
      NetworkAclId: !Ref NetworkAclVPC30B
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry30B:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition0B
    Properties:
      NetworkAclId: !Ref NetworkAclVPC30B
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC33A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition3A
    Properties:
      VpcId: !Ref VPC33A
      Tags:
        - Key: Name
          Value: pvai-ut-vpc3
  Inbound1NetworkAclEntry33A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition3A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC33A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry33A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition3A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC33A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  NetworkAclVPC34A:
    Type: 'AWS::EC2::NetworkAcl'
    Condition: CreateCondition4A
    Properties:
      VpcId: !Ref VPC34A
      Tags:
        - Key: Name
          Value: pvai-pt-vpc3
  Inbound1NetworkAclEntry34A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition4A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC34A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
  Outbound1NetworkAclEntry34A:
    Type: 'AWS::EC2::NetworkAclEntry'
    Condition: CreateCondition4A
    Properties:
      NetworkAclId: !Ref NetworkAclVPC34A
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
Outputs:
  VPC21A:
    Description: The VPC-ID of VPC2-1A
    Condition: CreateCondition1A
    Value: !Ref VPC21A
    Export:
      Name: vpc21A
  VPC22A:
    Description: The VPC-ID of VPC2-2A
    Condition: CreateCondition2A
    Value: !Ref VPC22A
    Export:
      Name: vpc22A
  VPC20A:
    Description: The VPC-ID of VPC2-0A
    Condition: CreateCondition0A
    Value: !Ref VPC20A
    Export:
      Name: vpc20A
  VPC20B:
    Description: The VPC-ID of VPC2-0B
    Condition: CreateCondition0B
    Value: !Ref VPC20B
    Export:
      Name: vpc20B
  VPC23A:
    Description: The VPC-ID of VPC2-3A
    Condition: CreateCondition3A
    Value: !Ref VPC23A
    Export:
      Name: vpc23A
  VPC24A:
    Description: The VPC-ID of VPC2-4A
    Condition: CreateCondition4A
    Value: !Ref VPC24A
    Export:
      Name: vpc24A
  VPC31A:
    Description: The VPC-ID of VPC3-1A
    Condition: CreateCondition1A
    Value: !Ref VPC31A
    Export:
      Name: vpc31A
  VPC32A:
    Description: The VPC-ID of VPC3-2A
    Condition: CreateCondition2A
    Value: !Ref VPC32A
    Export:
      Name: vpc32A
  VPC30A:
    Description: The VPC-ID of VPC3-0A
    Condition: CreateCondition0A
    Value: !Ref VPC30A
    Export:
      Name: vpc30A
  VPC30B:
    Description: The VPC-ID of VPC3-0B
    Condition: CreateCondition0B
    Value: !Ref VPC30B
    Export:
      Name: vpc30B
  VPC33A:
    Description: The VPC-ID of VPC3-3A
    Condition: CreateCondition3A
    Value: !Ref VPC33A
    Export:
      Name: vpc33A
  VPC34A:
    Description: The VPC-ID of VPC3-4A
    Condition: CreateCondition4A
    Value: !Ref VPC34A
    Export:
      Name: vpc34A
  vpcsg21A:
    Description: The Default Security Group of VPC21A
    Condition: CreateCondition1A 
    Value: !GetAtt VPC21A.DefaultSecurityGroup
    Export:
      Name: vpcsg21A
  vpcsg22A:
    Description: The Default Security Group of VPC22A
    Condition: CreateCondition2A
    Value: !GetAtt VPC22A.DefaultSecurityGroup
    Export:
      Name: vpcsg22A
  vpcsg20A:
    Description: The Default Security Group of VPC20A
    Condition: CreateCondition0A 
    Value: !GetAtt VPC20A.DefaultSecurityGroup
    Export:
      Name: vpcsg20A
  vpcsg20B:
    Description: The Default Security Group of VPC20B
    Condition: CreateCondition0B
    Value: !GetAtt VPC20B.DefaultSecurityGroup
    Export:
      Name: vpcsg20B
  vpcsg23A:
    Description: The Default Security Group of VPC23A
    Condition: CreateCondition3A 
    Value: !GetAtt VPC23A.DefaultSecurityGroup
    Export:
      Name: vpcsg23A
  vpcsg24A:
    Description: The Default Security Group of VPC24A
    Condition: CreateCondition4A
    Value: !GetAtt VPC24A.DefaultSecurityGroup
    Export:
      Name: vpcsg24A
  vpcsg31A:
    Description: The Default Security Group of VPC31A
    Condition: CreateCondition1A 
    Value: !GetAtt VPC31A.DefaultSecurityGroup
    Export:
      Name: vpcsg31A
  vpcsg32A:
    Description: The Default Security Group of VPC32A
    Condition: CreateCondition2A 
    Value: !GetAtt VPC32A.DefaultSecurityGroup
    Export:
      Name: vpcsg32A
  vpcsg30A:
    Description: The Default Security Group of VPC30A
    Condition: CreateCondition0A
    Value: !GetAtt VPC30A.DefaultSecurityGroup
    Export:
      Name: vpcsg30A
  vpcsg30B:
    Description: The Default Security Group of VPC30B
    Condition: CreateCondition0B 
    Value: !GetAtt VPC30B.DefaultSecurityGroup
    Export:
      Name: vpcsg30B
  vpcsg33A:
    Description: The Default Security Group of VPC33A
    Condition: CreateCondition3A
    Value: !GetAtt VPC33A.DefaultSecurityGroup
    Export:
      Name: vpcsg33A
  vpcsg34A:
    Description: The Default Security Group of VPC34A
    Condition: CreateCondition4A 
    Value: !GetAtt VPC34A.DefaultSecurityGroup
    Export:
      Name: vpcsg34A
  NetworkAclVPC21A:
    Description: NACL for VPC21A
    Condition: CreateCondition1A
    Value: !Ref NetworkAclVPC21A
    Export:
      Name: NetworkAclVPC21A
  NetworkAclVPC22A:
    Description: NACL for VPC22A
    Condition: CreateCondition2A
    Value: !Ref NetworkAclVPC22A
    Export:
      Name: NetworkAclVPC22A
  NetworkAclVPC20A:
    Description: NACL for VPC20A
    Condition: CreateCondition0A
    Value: !Ref NetworkAclVPC20A
    Export:
      Name: NetworkAclVPC20A
  NetworkAclVPC20B:
    Description: NACL for VPC20B
    Condition: CreateCondition0B
    Value: !Ref NetworkAclVPC20B
    Export:
      Name: NetworkAclVPC20B
  NetworkAclVPC23A:
    Description: NACL for VPC23A
    Condition: CreateCondition3A
    Value: !Ref NetworkAclVPC23A
    Export:
      Name: NetworkAclVPC23A
  NetworkAclVPC24A:
    Description: NACL for VPC24A
    Condition: CreateCondition4A
    Value: !Ref NetworkAclVPC24A
    Export:
      Name: NetworkAclVPC24A
  NetworkAclVPC31A:
    Description: NACL for VPC31A
    Condition: CreateCondition1A
    Value: !Ref NetworkAclVPC31A
    Export:
      Name: NetworkAclVPC31A 
  NetworkAclVPC32A:
    Description: NACL for VPC32A
    Condition: CreateCondition2A
    Value: !Ref NetworkAclVPC32A
    Export:
      Name: NetworkAclVPC32A
  NetworkAclVPC30A:
    Description: NACL for VPC30A
    Condition: CreateCondition0A
    Value: !Ref NetworkAclVPC30A
    Export:
      Name: NetworkAclVPC30A
  NetworkAclVPC30B:
    Description: NACL for VPC30B
    Condition: CreateCondition0B
    Value: !Ref NetworkAclVPC30B
    Export:
      Name: NetworkAclVPC30B
  NetworkAclVPC33A:
    Description: NACL for VPC33A
    Condition: CreateCondition3A
    Value: !Ref NetworkAclVPC33A
    Export:
      Name: NetworkAclVPC33A
  NetworkAclVPC34A:
    Description: NACL for VPC34A
    Condition: CreateCondition4A
    Value: !Ref NetworkAclVPC34A
    Export:
      Name: NetworkAclVPC34A