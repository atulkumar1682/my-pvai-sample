---
# -------------------------------------------------------------------------------------------------
#
#     Copyright Â© Genpact 2018. All Rights Reserved.
#     Ltd trading as G in NYSE - Registered in US.
#     Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.
#
# -------------------------------------------------------------------------------------------------
## author = 'Sandeep Kumar (Genpact Limited)'
## ver = '1.0.0'
## date = 28-Nov-2018
# -------------------------------------------------------------------------------------------------
Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: '2010-09-09'
Description: Create Lambda Function to create or update the Stack

Parameters:
  Prefix:
      Description: Prefix Value
      Default: pvai
      Type: String
  AccountName:
      Description: AWS Account Name
      Default: verification
      Type: String
  EnvType:
      Description: Environment name
      Type: String
      Default: sit
      AllowedValues: ["dev", "pt", "ml", "val", "prod", "sit", "ut"]
  Region:
      Type: String
      Default: Primary
      AllowedValues:
      - "Primary"
      - "Secondary"
      Description: Please specify the region where you want to create your Lambda function
  ExecutionRole:
      Description: Role for Lambda function
      Default: lambda_cf_execution
      Type: String
  S3Bucket:
      Description: S3 Bucket for CFN Template and Parameters
      Default: "pvai-app-deployment"
      Type: String
  MemorySize:
      Description: Memory Size for Lambda function
      Default: 128
      Type: String
  CFTPath:
      Description: CloudFormation Template path for deploying application
      Default: "Release1.0/CFT/Application-Setup/ApplicationDeployment/Core-App-Setup/Core-App-Setup.yml"
      Type: String
  ParametersPath:
      Description: Parameters file path for CFT
      Default: "verification/sit/core-app-parameters-dryrun.json"
      Type: String
  StackName:
      Description: Stack to be updated/created
      Default: "Core-App-Setup-SIT"
      Type: String       
  SecurityGroup:
      Description: Security Group ID associated with the Lambda function
      Default: "sg-a6ff3cec"
      Type: String
Conditions:
  # Create condition based on the Environment and Region selected;
  # To fetch the VPC and Subnet values based on the condition
  GetDevNetworkValues: !And
       - !Equals [ !Ref EnvType, "dev" ]
       - !Equals [ !Ref Region, "Primary" ]
  GetMLNetworkValues: !And
       - !Equals [ !Ref EnvType, "ml"]
       - !Equals [ !Ref Region, "Primary" ]
  GetPTNetworkValues: !And
       - !Equals [ !Ref EnvType, "pt"]
       - !Equals [ !Ref Region, "Primary" ]
  GetUTNetworkValues: !And
       - !Equals [ !Ref EnvType, "ut"]
       - !Equals [ !Ref Region, "Primary" ]
  GetSITNetworkValues: !And
       - !Equals [ !Ref EnvType, "sit"]
       - !Equals [ !Ref Region, "Primary" ]
  GetValNetworkValues: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, "Primary" ]
  GetProdNetworkValues: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, "Secondary" ]
  GetProdNetworkValuesSecondary: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, "Secondary" ]
  GetValNetworkValuesSecondary: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, "Secondary" ]      
Resources:
  lambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties: 
        Code:
          S3Bucket: !Sub "${Prefix}-${AccountName}-lambda-functions"
          S3Key: "create_or_update_stack.zip"
        Description: "creates or update stack for deployinng the code in selected env"
        Environment:
          Variables:
            S3_BUCKET: !Ref S3Bucket
            STACK_NAME: !Ref StackName
            TEMPLATE_KEY: !Ref CFTPath
            TEMPLATE_PARAMETERS: !Ref ParametersPath
        FunctionName: !Sub "${EnvType}-create-or-update-stack"
        Handler: "lambda_function.lambda_handler"
        MemorySize: !Ref MemorySize
        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ExecutionRole}"
        Runtime: "python2.7"
        Timeout: 300
        VpcConfig:
           "SecurityGroupIds": [ !Ref SecurityGroup ]
           "SubnetIds": [ !If [GetValNetworkValues, !ImportValue subnet23b0A, !If [GetProdNetworkValues, !ImportValue subnet24b0A, !If [GetDevNetworkValues, !ImportValue subnet23b1A, !If [GetMLNetworkValues, !ImportValue subnet24b1A, !If [GetPTNetworkValues, !ImportValue subnet23b4A, !If [GetUTNetworkValues, !ImportValue subnet23b3A, !If [GetSITNetworkValues, !ImportValue subnet23b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet24b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet23b0B, ""]]]]]]]]] , !If [GetValNetworkValues, !ImportValue subnet25b0A, !If [GetProdNetworkValues, !ImportValue subnet26b0A, !If [GetDevNetworkValues, !ImportValue subnet25b1A, !If [GetMLNetworkValues, !ImportValue subnet26b1A, !If [GetPTNetworkValues, !ImportValue subnet24b4A, !If [GetUTNetworkValues, !ImportValue subnet24b3A, !If [GetSITNetworkValues, !ImportValue subnet24b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet26b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet25b0B, ""]]]]]]]]]]
        Tags:
          - Key: Environment
            Value: !Ref EnvType
          - Key: Account
            Value: !Ref AccountName

Outputs:
  lambdaArn:
    Value: !GetAtt "lambdaFunction.Arn"