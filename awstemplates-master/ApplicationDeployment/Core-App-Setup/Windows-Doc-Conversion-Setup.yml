---
# -------------------------------------------------------------------------------------------------
#
#     Copyright Â© Genpact 2018. All Rights Reserved.
#     Ltd trading as G in NYSE - Registered in US.
#     Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.
#
# -------------------------------------------------------------------------------------------------
## author = 'Sandeep Kumar (Genpact Limited)'
## ver = '1.0.0'
## date = 23-Jul-2019
# -------------------------------------------------------------------------------------------------

AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud Formation template to deploy doc-conversion war file on Windows Server 2012 R2 with Tomcat webserver.
Parameters:
  Prefix:
    Description: Prefix Name
    Default: pvai
    Type: String
  AccountName:
    Description: Account alias name
    Default: verification
    Type: String 
  Region: 
    Description: AWS Region
    Default: Primary
    Type: String
    AllowedValues: 
       - Primary
       - Secondary
    ConstraintDescription: Select the Region for creation.
  EnvType: 
    Description: Environment Type
    Default: prod
    Type: String
    AllowedValues: 
       - dev
       - ml
       - sit
       - val
       - prod
       - ut
       - pt
    ConstraintDescription: Select the Environment for Creation
  KeyName:
    Description: Name of an existing EC2 KeyPair
    Type: AWS::EC2::KeyPair::KeyName
    Default: pvai-verification-prod
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DesiredCapacity:
    Description: EC2 Instance Desired for Application
    Type: Number
    Default: 1
    ConstraintDescription: 'Must be in the range [1-10]'
    MinValue: 1
    MaxValue: 10
  InstanceProfile:
    Description: Instance Role
    Default: EC2-S3-AccessRole
    Type: String
  IdleTimeout:
    Description: The time (in seconds) that a connection to the load balancer can remain idle
    Type: Number
    Default: 1800
    ConstraintDescription: 'Must be in the range [0-3600]'
    MinValue: 0
    MaxValue: 3600
  AMI:
    Description: AMI for EC2 Instance
    Default: ami-03ab6ec062a538ebf
    Type: AWS::EC2::Image::Id  
  InstanceType:
    Description: Amazon EC2 instance type
    Type: String
    Default: m5.large
    AllowedValues:
    - t3.small
    - t3.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.10xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  RootVolumeSize:
    Description: Root volume size.
    Type: String
    Default: "100"
  SourceCidrForRDP:
    Description: IP Cidr from which you are likely to RDP into the instances. You
      can add rules later by modifying the created security groups e.g. 54.32.98.160/32
    Type: String
    Default: 10.0.0.0/8
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "^([0-9]+\\.){3}[0-9]+\\/[0-9]+$"
  App:
    Description: Application Name
    Type: String
    Default: "windoc"    
  AppPort:
    Description: Port being used to hit the App
    Type: String
    Default: 8080
    AllowedPattern: ^[0-9/]*$
  WarFilePath:
    Description: War file for the application
    Type: String
    Default: "C:\\Apache-Tomcat\\Tomcat9.0\\webapps"
  S3Bucket:
    Description: S3 Bucket for War file
    Type: String
    Default: "pvai-verification-deployment"
  # Major and Minor releases and Artifacts path
  MajorRelease:
    Description: Major version of the Product
    Type: String
    Default: "intake-1.0"
  MinorRelease:
    Description: Minor version of the application
    Type: String
    Default: "102C"
  BuildNumber:
    Description: BuildNumber of Core-App application
    Type: String
    Default: "285"
  PackagePath:
    Description: Path for the war files (after Application folder)
    Type: String
    Default: "packages"
  ConfigFilesPath:
    Description: Path for the config files (after environment folder)
    Type: String
    Default: "config"
  IdleTimeout:
    Description: The time (in seconds) that a connection to the load balancer can remain idle
    Type: Number
    Default: 1800
    ConstraintDescription: 'Must be in the range [60-3600]'
    MinValue: 60
    MaxValue: 3600
  HostedZoneResource:
    Description: Private DNS
    Type: String
    Default: "local."
Conditions: 
  # Create condition based on the Environment selected;
  # To fetch the VPC and Subnet values based on the condition
  GetDevNetworkValues: !And
       - !Equals [ !Ref EnvType, "dev" ]
       - !Equals [ !Ref Region, Primary ]
  GetMLNetworkValues: !And
       - !Equals [ !Ref EnvType, "ml"]
       - !Equals [ !Ref Region, Primary ]
  GetPTNetworkValues: !And
       - !Equals [ !Ref EnvType, "pt"]
       - !Equals [ !Ref Region, Primary ]
  GetUTNetworkValues: !And
       - !Equals [ !Ref EnvType, "ut"]
       - !Equals [ !Ref Region, Primary ]
  GetSITNetworkValues: !And
       - !Equals [ !Ref EnvType, "sit"]
       - !Equals [ !Ref Region, Primary ]
  GetValNetworkValues: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, Primary ]
  GetProdNetworkValues: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, Primary ]
  GetProdNetworkValuesSecondary: !And
       - !Equals [ !Ref EnvType, "prod"]
       - !Equals [ !Ref Region, Secondary ]
  GetValNetworkValuesSecondary: !And
       - !Equals [ !Ref EnvType, "val"]
       - !Equals [ !Ref Region, Secondary ]
Resources:
  sg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Prefix}-${EnvType}-${App}-vpc2
      GroupDescription: Enable RDP
      VpcId: !If [GetValNetworkValues, !ImportValue vpc20A, !If [GetProdNetworkValues, !ImportValue vpc20A, !If [GetDevNetworkValues, !ImportValue vpc21A, !If [GetMLNetworkValues, !ImportValue vpc21A, !If [GetPTNetworkValues, !ImportValue vpc24A, !If [GetUTNetworkValues, !ImportValue vpc23A, !If [GetSITNetworkValues, !ImportValue vpc22A, !If [GetProdNetworkValuesSecondary,!ImportValue vpc20B, !If [GetValNetworkValuesSecondary, !ImportValue vpc20B, ""]]]]]]]]]
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${EnvType}-${App}-vpc2
  sgingress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sg
      IpProtocol: '-1'
      CidrIp: !Ref SourceCidrForRDP
  launchconfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - 'triggers=post.update '
                  - 'path=Resources.launchconfig.Metadata.AWS::CloudFormation::Init '
                  - 'action=cfn-init.exe -v -s '
                  - Ref: AWS::StackId
                  - " -r launchconfig"
                  - " --region "
                  - Ref: AWS::Region
                  - "\n"
            c:\cfn\scripts\Download-War.ps1:
              content: !Sub |
                Set-Location "${WarFilePath}";
                Read-S3Object -BucketName ${S3Bucket} -Key "${MajorRelease}/${MinorRelease}/${BuildNumber}/${App}/${PackagePath}/doc-conversion.war" -File doc-conversion.war;
            c:\cfn\scripts\Restart-Tomcat.ps1:
              content: !Sub |
                Restart-Service -Name Tomcat9 -Force;
            c:\cfn\scripts\Download-Filebeat.ps1:
              content: !Sub |
                Set-Location "C:\\Program Files\\Filebeat";
                Read-S3Object -BucketName ${S3Bucket} -Key "${MajorRelease}/${MinorRelease}/${BuildNumber}/${App}/${EnvType}/filebeat.yml" -File filebeat.yml;
            c:\cfn\scripts\Restart-Filebeat.ps1:
              content: !Sub |
                Restart-Service -Name filebeat;
          commands:
            1-download-war:
              command: powershell.exe -ExecutionPolicy RemoteSigned -Command c:\cfn\scripts\Download-War.ps1
              waitAfterCompletion: '10'
            2-restart-tomcat:
              command: powershell.exe -ExecutionPolicy RemoteSigned -Command c:\cfn\scripts\Restart-Tomcat.ps1
              waitAfterCompletion: '5'
            3-download-filebeat:
              command: powershell.exe -ExecutionPolicy RemoteSigned -Command c:\cfn\scripts\Download-Filebeat.ps1
              waitAfterCompletion: '10'
            4-restart-tomcat:
              command: powershell.exe -ExecutionPolicy RemoteSigned -Command c:\cfn\scripts\Restart-Filebeat.ps1
              waitAfterCompletion: '5'
            5-disable-firewall:
              command: powershell.exe -ExecutionPolicy RemoteSigned -Command "New-NetFirewallRule -Name "Allow Port 8080" -Description "Allow Port 8080 for Doc-Conversion App" -DisplayName "Allow Port 8080" -Enabled:True -Profile Domain,Public,Private -Direction Inbound -Action Allow -Protocol TCP -LocalPort 8080"
            

          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref AMI
      InstanceType: !Ref InstanceType
      EbsOptimized: "true"
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref InstanceProfile
      InstanceMonitoring: 'true'
      AssociatePublicIpAddress: 'false'
      SecurityGroups:
        - !Ref sg 
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            VolumeType: "gp2"
            Encrypted: "true"
            #KmsKeyId: !Ref EC2KmsKeyId

      # User Data commands to be run during Initialization of Server
      UserData:
        Fn::Base64:
          !Sub |
            <powershell>
            cfn-init.exe -v -s ${AWS::StackName} --resource launchconfig --region ${AWS::Region}
            cfn-signal -e $lastexitcode --stack ${AWS::StackName} --resource asgroup --region ${AWS::Region}
            </powershell>
            
  asgroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      Cooldown: '300'
      DesiredCapacity: !Ref DesiredCapacity
      HealthCheckGracePeriod: '300'
      HealthCheckType: EC2
      MaxSize: '4'
      MinSize: '1'
      VPCZoneIdentifier:
        - !If [GetValNetworkValues, !ImportValue subnet23b0A, !If [GetProdNetworkValues, !ImportValue subnet24b0A, !If [GetDevNetworkValues, !ImportValue subnet23b1A, !If [GetMLNetworkValues, !ImportValue subnet24b1A, !If [GetPTNetworkValues, !ImportValue subnet23b4A, !If [GetUTNetworkValues, !ImportValue subnet23b3A, !If [GetSITNetworkValues, !ImportValue subnet23b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet24b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet23b0B, ""]]]]]]]]]
        - !If [GetValNetworkValues, !ImportValue subnet25b0A, !If [GetProdNetworkValues, !ImportValue subnet26b0A, !If [GetDevNetworkValues, !ImportValue subnet25b1A, !If [GetMLNetworkValues, !ImportValue subnet26b1A, !If [GetPTNetworkValues, !ImportValue subnet24b4A, !If [GetUTNetworkValues, !ImportValue subnet24b3A, !If [GetSITNetworkValues, !ImportValue subnet24b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet26b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet25b0B, ""]]]]]]]]]
      LaunchConfigurationName: !Ref launchconfig
      LoadBalancerNames:
        - !Ref ClassicLoadBalancer         
      Tags:
        - Key: Name
          Value: !Sub "${Prefix}-${EnvType}-${App}"
          PropagateAtLaunch: true
        - Key: Project
          Value: !Ref App
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvType
          PropagateAtLaunch: true
        - Key: Scheduled
          Value: "no"
          PropagateAtLaunch: true
      TerminationPolicies:
        - Default
    DependsOn:
        - ClassicLoadBalancer      
     #Creation policy for resource creation and deployment
    CreationPolicy:
      AutoScalingCreationPolicy:
        MinSuccessfulInstancesPercent: 100
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    #Update policy for deploying new version
    UpdatePolicy:
      AutoScalingScheduledAction:
        IgnoreUnmodifiedGroupSizeProperties: 'true'
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '2'
        PauseTime: PT3M
        WaitOnResourceSignals: 'true'

  # Classic LoadBalancer for Doc-Conversion application
  ClassicLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: !Sub ${Prefix}-${EnvType}-${App}-clb
      Scheme: internal
      CrossZone: True
      ConnectionSettings:
        IdleTimeout: !Ref IdleTimeout
      SecurityGroups: 
        - !Ref sg
      # fetch ELB Subnet1 and ELB Subnet2 values
      Subnets:
        - !If [GetValNetworkValues, !ImportValue subnet23b0A, !If [GetProdNetworkValues, !ImportValue subnet24b0A, !If [GetDevNetworkValues, !ImportValue subnet23b1A, !If [GetMLNetworkValues, !ImportValue subnet24b1A, !If [GetPTNetworkValues, !ImportValue subnet23b4A, !If [GetUTNetworkValues, !ImportValue subnet23b3A, !If [GetSITNetworkValues, !ImportValue subnet23b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet24b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet23b0B, ""]]]]]]]]]
        - !If [GetValNetworkValues, !ImportValue subnet25b0A, !If [GetProdNetworkValues, !ImportValue subnet26b0A, !If [GetDevNetworkValues, !ImportValue subnet25b1A, !If [GetMLNetworkValues, !ImportValue subnet26b1A, !If [GetPTNetworkValues, !ImportValue subnet24b4A, !If [GetUTNetworkValues, !ImportValue subnet24b3A, !If [GetSITNetworkValues, !ImportValue subnet24b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet26b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet25b0B, ""]]]]]]]]]
      Tags:
        - Key: Name
          Value: !Sub ${Prefix}-${EnvType}-${App}
        - Key: Project
          Value: !Ref App
        - Key: Environment
          Value: !Ref EnvType
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort:
          Ref: AppPort
        Protocol: HTTP
      HealthCheck:
        Target:
          Fn::Join:
          - ''
          - - 'TCP:'
            - Ref: AppPort
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
  # Create alarm to identify any unhealthy host under Doc-Conversion Classic LoadBalancer
  UnhealthyHostAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
         AlarmName: !Sub ${Prefix}-${EnvType}-${App}-alarm
         AlarmDescription: Unhealthy host under Doc-Conversion CLB
         Namespace: AWS/ELB
         Dimensions:
          - Name: LoadBalancerName
            Value: !Sub ${Prefix}-${EnvType}-${App}-clb
         MetricName: UnHealthyHostCount
         ComparisonOperator: GreaterThanThreshold
         Statistic: Minimum
         Period: 60
         EvaluationPeriods: 1
         Threshold: 0

  # Creating DNS record for Doc-Conversion CLB
  DNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref HostedZoneResource
      Comment: Zone apex alias targeted to Elastic LoadBalancer.
      RecordSets:
      - Name: !Sub "${Prefix}-${EnvType}-${App}-clb.${HostedZoneResource}"
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt ClassicLoadBalancer.CanonicalHostedZoneNameID
          DNSName: !GetAtt ClassicLoadBalancer.DNSName