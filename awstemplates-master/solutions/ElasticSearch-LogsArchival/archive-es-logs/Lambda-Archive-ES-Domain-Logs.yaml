---
# -------------------------------------------------------------------------------------------------
#
#     Copyright Â© Genpact 2018. All Rights Reserved.
#     Ltd trading as G in NYSE - Registered in US.
#     Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.
#
# -------------------------------------------------------------------------------------------------
## author = 'Sandeep Kumar (Genpact Limited)'
## ver = '1.0.0'
## date = 24-Jan-2019
# -------------------------------------------------------------------------------------------------
Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: '2010-09-09'
Description: Create Lambda function to archive AWS ES Cluster logs

Parameters:
  AccountName:
      Description: AWS Account Name
      Default: verification
      Type: String
  Region:
      Type: String
      Default: us-east-1
      AllowedValues:
      - "us-east-1"
      - "eu-west-1"
      Description: Please specify the region where you want to create your Lambda function
  EnvType:
      Description: Environment name
      Type: String
      Default: sit
      AllowedValues: ["dev", "pt", "ml", "val", "prod", "sit", "ut"]
# Pre-requiste for Lambda function to create an IAM role
# which will have access on ES and EC2 service
  ExecutionRole:
      Description: Role for Lambda function
      Default: lambda-es-curator
      Type: String
  S3Bucket:
      Description: S3 Bucket for Lambda Function
      Default: "pvai-devops-lambda-functions"
      Type: String
  MemorySize:
      Description: Memory Size for Lambda function
      Default: 128
      Type: String
  RetentionDays:
      Description: Days for logs to be kept
      Default: 60
      Type: String  
  SecurityGroup:
      Description: Security Group ID associated with the Lambda function
      Default: "sg-225f856b"
      Type: String
  TimeOut:
      Description: TimeOut for Lambda function (in seconds)
      Default: 30
      Type: String
  ScheduleExpression:
      Description: TimeOut for Lambda function (in seconds)
      Default: "cron(0 2 * * ? *)"
      Type: String
  PythonPackage:
      Description: Python function as a package with all dependencies
      Default: "archive-es-logs.zip"
      Type: String
  ElasticSearchDomain:
      Description: ES Domain
      Default: "vpc-pvai-sit-logs-ptu6az3a7fmzckahdjae4yjnwq.us-east-1.es.amazonaws.com"
      Type: String
Resources:
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties: 
        Code:
          S3Bucket: !Ref S3Bucket
          S3Key: !Ref PythonPackage
        Description: "archive environment specific domain logs based on days provided"
        Environment:
          Variables:
            DAYS_COUNT: !Ref RetentionDays
            REGION: !Ref Region
            ES_HOST: !Ref ElasticSearchDomain
        FunctionName: !Sub "pvai-${EnvType}-archive-es-logs"
        Handler: "lambda_function.lambda_handler"
        MemorySize: !Ref MemorySize
        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ExecutionRole}"
        Runtime: "python2.7"
        Timeout: !Ref TimeOut
        VpcConfig:
           "SecurityGroupIds": [ !Ref SecurityGroup ]
           "SubnetIds": [ !ImportValue subnet13bA , !ImportValue subnet14bA ]
        Tags:
          - Key: Name
            Value: !Sub "archive-es-logs-${EnvType}"
          - Key: Environment
            Value: !Ref EnvType
          - Key: Account
            Value: !Ref AccountName
            
  ScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: !Sub "Schedule Lambda function to archive the ${EnvType} ES logs"
      Name: !Sub "Archive-ES-Logs-${EnvType}"
      # runs every day at 2:00am UTC
      ScheduleExpression: !Ref ScheduleExpression
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "LambdaFunction"
              - "Arn"
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: 
        Ref: "LambdaFunction"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "ScheduledRule"
          - "Arn"

Outputs:
  LambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"
  RuleArn:
    Value: !GetAtt "ScheduledRule.Arn"