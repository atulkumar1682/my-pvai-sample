---

# -------------------------------------------------------------------------------------------------

#

#     Copyright ? Genpact 2018. All Rights Reserved.

#     Ltd trading as G in NYSE - Registered in US.

#     Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.

#

# -------------------------------------------------------------------------------------------------

## author = 'Sandeep Kumar (Genpact Limited)'

## ver = '1.0.0'

## date = 25-Feb-2019

# -------------------------------------------------------------------------------------------------

Transform: AWS::Serverless-2016-10-31

AWSTemplateFormatVersion: '2010-09-09'

Description: Create Lambda Function to deploy core-app on the mutable instances


Parameters:

  AccountName:

      Description: AWS Account Name

      Default: verification

      Type: String

  EnvType:

      Description: Environment name

      Type: String

      Default: sit

      AllowedValues: ["dev", "pt", "ml", "val", "prod", "sit", "ut"]

  Region:

      Type: String

      Default: Primary

      AllowedValues:

      - "Primary"

      - "Secondary"

      Description: Please specify the region where you want to create your Lambda function

# Pre-requisite for Lambda function to create an IAM role

# which will have access on CloudWatch logs, Describe EC2, Invoke Lambda and EC2 Key S3 Bucket services

# modify this role to invoke new function

  ExecutionRole:

      Description: Role for Lambda function

      Default: lambda_deploy_app

      Type: String

  LambdaS3Bucket:

      Description: S3 Bucket for Lambda Function

      Default: "pvai-devops-lambda-functions"

      Type: String

  MemorySize:

      Description: Memory Size for Lambda function

      Default: 128

      Type: String

  TimeOut:

      Description: TimeOut for Lambda function (in seconds)

      Default: 300

      Type: String

  LambdaPackage:

      Description: Python function as a package with all dependencies

      Default: "deploy-core-app.zip"

      Type: String

  LambdaFunction:

      Description: Python function as a package with all dependencies

      Default: "deploy-core-app"

      Type: String

  SecurityGroup:

      Description: Security Group ID associated with the Lambda function

      Default: "sg-a6ff3cec"

      Type: String

  DeployScript:

      Description: Deployment Script Name

      Default: "DeployDryRunHotfix.sh"

      Type: String

  EC2KeyBucket:

      Description: S3 Bucket for EC2 Key

      Default: "pvai-verification-ec2-key-bucket"

      Type: String

  EC2KeyPath:

      Description: Folder in S3 Bucket for EC2 Key

      Default: "dryrun/pvai-verification-sit.pem"

      Type: String

  ScriptS3Path:

      Description: S3 Bucket full path for Deployment Script

      Default: "pvai-verification-deployment/scripts/"

      Type: String

Conditions:

  # Create condition based on the Environment and Region selected;

  # To fetch the VPC and Subnet values based on the condition

  GetDevNetworkValues: !And

       - !Equals [ !Ref EnvType, "dev" ]

       - !Equals [ !Ref Region, "Primary" ]

  GetMLNetworkValues: !And

       - !Equals [ !Ref EnvType, "ml"]

       - !Equals [ !Ref Region, "Primary" ]

  GetPTNetworkValues: !And

       - !Equals [ !Ref EnvType, "pt"]

       - !Equals [ !Ref Region, "Primary" ]

  GetUTNetworkValues: !And

       - !Equals [ !Ref EnvType, "ut"]

       - !Equals [ !Ref Region, "Primary" ]

  GetSITNetworkValues: !And

       - !Equals [ !Ref EnvType, "sit"]

       - !Equals [ !Ref Region, "Primary" ]

  GetValNetworkValues: !And

       - !Equals [ !Ref EnvType, "val"]

       - !Equals [ !Ref Region, "Primary" ]

  GetProdNetworkValues: !And

       - !Equals [ !Ref EnvType, "prod"]

       - !Equals [ !Ref Region, "Secondary" ]

  GetProdNetworkValuesSecondary: !And

       - !Equals [ !Ref EnvType, "prod"]

       - !Equals [ !Ref Region, "Secondary" ]

  GetValNetworkValuesSecondary: !And

       - !Equals [ !Ref EnvType, "val"]

       - !Equals [ !Ref Region, "Secondary" ]

       

Resources:

  lambdaFunction:

    Type: "AWS::Lambda::Function"

    Properties: 

        Code:

          S3Bucket: !Ref LambdaS3Bucket

          S3Key: !Ref LambdaPackage

        Description: "Deploy core app to the server for an environment"

        Environment:

          Variables:

            DEPLOY_SCRIPT: !Ref DeployScript

            EC2_KEY_BUCKET: !Ref EC2KeyBucket

            EC2_KEY_PATH: !Ref EC2KeyPath

            SCRIPT_S3_PATH: !Ref ScriptS3Path

        FunctionName: !Ref LambdaFunction

        Handler: !Sub "deploy-core-app.lambda_handler"

        MemorySize: !Ref MemorySize

        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ExecutionRole}"

        Runtime: "python2.7"

        Timeout: !Ref TimeOut

        VpcConfig:

           "SecurityGroupIds": [ !Ref SecurityGroup ]

           "SubnetIds": [ !If [GetValNetworkValues, !ImportValue subnet23b0A, !If [GetProdNetworkValues, !ImportValue subnet24b0A, !If [GetDevNetworkValues, !ImportValue subnet23b1A, !If [GetMLNetworkValues, !ImportValue subnet24b1A, !If [GetPTNetworkValues, !ImportValue subnet23b4A, !If [GetUTNetworkValues, !ImportValue subnet23b3A, !If [GetSITNetworkValues, !ImportValue subnet23b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet24b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet23b0B, ""]]]]]]]]] , !If [GetValNetworkValues, !ImportValue subnet25b0A, !If [GetProdNetworkValues, !ImportValue subnet26b0A, !If [GetDevNetworkValues, !ImportValue subnet25b1A, !If [GetMLNetworkValues, !ImportValue subnet26b1A, !If [GetPTNetworkValues, !ImportValue subnet24b4A, !If [GetUTNetworkValues, !ImportValue subnet24b3A, !If [GetSITNetworkValues, !ImportValue subnet24b2A, !If [GetProdNetworkValuesSecondary,!ImportValue subnet26b0B, !If [GetValNetworkValuesSecondary, !ImportValue subnet25b0B, ""]]]]]]]]]]

        Tags:

          - Key: Environment

            Value: !Ref EnvType

          - Key: Account

            Value: !Ref AccountName

Outputs:

  lambdaArn:

    Value: !GetAtt "lambdaFunction.Arn"