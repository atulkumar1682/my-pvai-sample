---
# -------------------------------------------------------------------------------------------------
#
#     Copyright Â© Genpact 2018. All Rights Reserved.
#     Ltd trading as G in NYSE - Registered in US.
#     Registered Office - Canon's Court, 22 Victoria Street HAMILTON, HM 12, Bermuda.
#
# -------------------------------------------------------------------------------------------------
## author = 'Sandeep Kumar (Genpact Limited)'
## ver = '1.0.0'
## date = 22-Feb-2019
# -------------------------------------------------------------------------------------------------
Transform: AWS::Serverless-2016-10-31
AWSTemplateFormatVersion: '2010-09-09'
Description: Create Lambda function for copying DB Snapshots

Parameters:
  AccountName:
      Description: AWS Account Name
      Default: verification
      Type: String
  PrimaryRegion:
      Type: String
      Default: us-east-1
      Description: Region where you want to create the Lambda function
  SecondaryRegion:
      Type: String
      Default: eu-west-1
      Description: Disaster Recovery Region where Snapshots are copied
  EnvType:
      Description: Environment Type
      Default: prod
      Type: String
      AllowedValues: [ val, prod ]
      ConstraintDescription: Select the Environment for Creation. 
# Pre-requisite for Lambda function to create an IAM role
# which will have access on CloudWatch logs, KMS and RDS service
  ExecutionRole:
      Description: Role for Lambda function
      Default: lambda-db-dr-execution
      Type: String
  LambdaS3Bucket:
      Description: S3 Bucket for Lambda Function
      Default: "pvai-devops-lambda-functions"
      Type: String
  MemorySize:
      Description: Memory Size for Lambda function
      Default: 128
      Type: String
  TimeOut:
      Description: TimeOut for Lambda function (in seconds)
      Default: 300
      Type: String
  PythonPackage:
      Description: Python function as a package with all dependencies
      Default: "Orcl_Copy_Snapshot.zip"
      Type: String
  DatabaseID:
      Description: Database Identifier
      Default: "dbprod"
      Type: String
  KmsKeyID:
      Description: KMS Key ID (for DB encryption) in the Secondary Region
      Default: "b2f61efa-b3ac-461c-95d3-14c8d7c9ee35"
      Type: String   
      
Resources:
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties: 
        Code:
          S3Bucket: !Ref LambdaS3Bucket
          S3Key: !Ref PythonPackage
        Description: "create db snapshots"
        Environment:
          Variables:
            PRIMARY_REGION: !Ref PrimaryRegion
            DR_REGION: !Ref SecondaryRegion
            DB_ID: !Ref DatabaseID
            KMS_KEY_ID: !Ref KmsKeyID
        FunctionName: !Sub "${AccountName}-${EnvType}-copy-db-snapshots"
        Handler: "Orcl_Copy_Snapshot.lambda_handler"
        MemorySize: !Ref MemorySize
        Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/${ExecutionRole}"
        Runtime: "python2.7"
        Timeout: !Ref TimeOut
        Tags:
          - Key: Name
            Value: !Sub "${EnvType}-DB-Snapshots"
          - Key: Account
            Value: !Ref AccountName
          - Key: Environment
            Value: !Ref EnvType
            
# Create SNS topic with Display Name
  SNS:
     Type: "AWS::SNS::Topic"
     Properties: 
        DisplayName: !Sub ${EnvType}-DB-Snapshots
        TopicName: "DB_Snapshot_initiated_primary_region"
 # Subscribe it to some email id
  Subscription:
    Type: "AWS::SNS::Subscription"
    Properties:
        Endpoint: 
          Fn::GetAtt: 
            - "LambdaFunction"
            - "Arn"
        Protocol: Lambda
        TopicArn: !Ref SNS
  TopicPolicy: 
      Type: "AWS::SNS::TopicPolicy"
      Properties: 
        Topics: 
          - Ref: SNS
        PolicyDocument: 
          Version: "2008-10-17"
          Statement: 
            - 
              Sid: "AWSCloudTrailSNSPolicy"
              Effect: "Allow"
              Principal: 
                Service: "cloudtrail.amazonaws.com"
              Resource: "*"
              Action: "SNS:Publish"
  EventSubscription: 
    Type: "AWS::RDS::EventSubscription"
    Properties: 
      EventCategories: 
        - "backup"
      SnsTopicArn: !Ref SNS
      SourceIds: 
        - !Ref DatabaseID
      SourceType: "db-instance"
      Enabled: true
Outputs:
  LambdaArn:
    Value: !GetAtt "LambdaFunction.Arn"
  SNSTopicArn:
    Value: !GetAtt "SNS.TopicName"